import json
import re
import subprocess
import os
import pty

def format_data(file_path):

    with open(file_path,'r') as f:
        data = json.load(f)

    base_dico_for_exploit_search = {}

    for ip, details in data.items():
        base_dico_for_exploit_search[ip] = {}
        print(f"IP Address: {ip}")
        for port_info in details['ports']:
            port = port_info['port']['port_id']
            product = port_info['service']['product']
            version = port_info['service']['version'].split(" ")[0]
            match = re.match(r"(\d+\.\d+\.\d+)",version)
            if match:
                version = match.group(1)

            if product != 'None' and version != 'None':
                print(f"  Port: {port}, Product: {product}, Version: {version}")
                base_dico_for_exploit_search[ip][port]= {"Product":product,
                                                         "Version":version}
    return base_dico_for_exploit_search

def get_exploits_parsed(data):

    categories = []
    parsed_searchsploit = {"Exploit":{},
                           "Shellcode":{},
                           "Paper":{}
                           }

    current_categorie = ""

    for line in data:
        if '------------' not in line:
            for starting in parsed_searchsploit.keys():
                if line.strip().startswith(starting):
                    if "No Results" not in line:
                        categories.append(starting)
                        current_categorie = starting
                    else:
                        parsed_searchsploit[starting] = "No Results"   
                        current_categorie = ""

            if current_categorie and not line.strip().startswith(starting):
        
                splited_line = line.split("|")


                for elem in splited_line:
                    splited_line[splited_line.index(elem)] = elem.rstrip().lstrip()
                print(splited_line)

                if splited_line[1] != "Path":
                    parsed_searchsploit[current_categorie][splited_line[1]] = splited_line[0]

    return parsed_searchsploit

def launch_searchploit(data,repertory_path,scan_name):

    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    BLUE = "\033[0;34m"
    COLOR_OFF = "\033[0m"

    searchsploit_data = {}

    dir_path = f"{repertory_path}/{scan_name}/searchsploit"
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)

    output_path = f"{dir_path}/{scan_name}-searchsploit.json"

    for ip in data.keys():
        searchsploit_data[ip] = {}
        for port in data[ip].keys():
            temp_output_path = "/tmp/output{port}.txt"
            command = f"searchsploit {data[ip][port]['Product']} {data[ip][port]['Product']} --disable-color > {temp_output_path}"        
            result = subprocess.run(command,stderr=subprocess.PIPE, shell=True, executable="/bin/bash")

            if result.stderr:
                print(f"{RED}Erreur lors de l'execution: {COLOR_OFF}")
                print(result.stderr)
            else:
                print(f"{GREEN}Commande éxécuté{COLOR_OFF}")
            
            with open(temp_output_path,'r') as f:
                searchsploit_data[ip][port] = get_exploits_parsed(f.readlines())

    with open(output_path,'w') as f:
        json.dump(searchsploit_data,f)
    
    print(f"{BLUE}Fichier sauvegardé à ce chemin : {output_path}{COLOR_OFF}")

def load_exploit_for_manual_config(exploit):

    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    BLUE = "\033[0;34m"
    COLOR_OFF = "\033[0m"

    exploit_file = exploit.split("/")[2]

    command = f'searchsploit -m {exploit} && mv /crecerelle-project/{exploit_file} /root/{exploit_file}'
    result = subprocess.run(command,stderr=subprocess.PIPE,shell=True, executable="/bin/bash")

    if result.stderr:
        print(f"{RED}Erreur lors du chargement de l'exploit: {COLOR_OFF}")
        print(result.stderr)
    else:
        print(f"{GREEN}Exploit chargé, l'invite de commande va être lancé{COLOR_OFF}")


    pty.spawn('bash')
    # command = '/bin/bash -i -c "cd /root && exec bash"'
    # subprocess.run(command,stderr=subprocess.PIPE,shell=True, executable="/bin/bash")

    print("Retour à l'outil")